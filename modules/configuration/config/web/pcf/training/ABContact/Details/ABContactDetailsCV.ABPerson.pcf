<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <CardViewPanel
    id="ABContactDetailsCV"
    mode="ABPerson|ABPersonVendor|ABAdjudicator|ABUserContact|ABDoctor|ABAttorney|ABPolicyPerson">
    <Require
      name="anABContact"
      type="ABContact"/>
    <Card
      id="PersonInfoCard"
      title="displaykey.Training.PersonInfoCard"
      visible="anABContact typeis ABPerson">
      <PanelRef
        def="ABContactDetailsPersonDV(anABContact)">
        <Toolbar/>
      </PanelRef>
    </Card>
    <Card
      id="PhoneAddressesCard"
      title="displaykey.Training.PhoneAddressesCard">
      <DetailViewPanel
        editable="true"
        id="PhoneAndAddressesDV">
        <InputColumn>
          <Label
            id="Phone"
            label="displaykey.Training.PhoneNumbers"/>
          <Input
            editable="true"
            id="PrimaryPhone"
            label="displaykey.Training.PrimaryPhone"
            value="(anABContact as ABPerson).PrimaryPhone"/>
          <Input
            editable="true"
            id="FaxPhone"
            label="displaykey.Training.FaxPhone"
            value="anABContact.FaxPhone"/>
          <Input
            editable="true"
            id="HomePhone"
            label="displaykey.Training.HomePhone"
            value="anABContact.HomePhone"
            visible="anABContact typeis ABPerson"/>
          <Input
            editable="true"
            id="BusinessPhone"
            label="displaykey.Training.WorkPhone"
            value="anABContact.WorkPhone"/>
          <Label
            id="PrimaryAddress"
            label="displaykey.Training.PrimaryAddress"/>
          <InputSetRef
            def="AddressOwnerInputSet(anABContact.AddressOwner, true)"
            id="BasicAddressInputSet"/>
        </InputColumn>
      </DetailViewPanel>
    </Card>
    <Card
      id="BankAccountsCard"
      title="displaykey.Training.BankAccounts">
      <PanelRef
        def="BankAccountsLV(anABContact)">
        <Toolbar>
          <IteratorButtons
            iterator="BankAccountsLV.BankAccountsLV"/>
          <ToolbarButton
            action="null"
            available="!CurrentLocation.InEditMode"
            hideIfEditable="true"
            id="ToolbarButtonRefresh"
            label="displaykey.Training.CheckVerification"
            showConfirmMessage="false"
            visible="anABContact.BankAccounts.Count&gt;0"/>
        </Toolbar>
      </PanelRef>
    </Card>
    <Card
      id="FinancialSummaryCard"
      title="displaykey.Training.FinancialSummary"
      visible="(anABContact typeis ABPolicyPerson) or (anABContact typeis ABPolicyCompany)">
      <DetailViewPanel>
        <InputColumn>
          <Label
            id="PremiumLabel"
            label="displaykey.Training.Premium"/>
          <Input
            editable="true"
            id="TotalPolicyPremiumBilled"
            label="displaykey.Training.TotalPolicyPremiumBilled"
            value="anABContact.FinancialSummary.TotalPolicyPremiumBilled"/>
          <Input
            editable="true"
            id="TotalPolicyPremiumPaid"
            label="displaykey.Training.TotalPolicyPremiumPaid"
            value="anABContact.FinancialSummary.TotalPolicyPremiumPaid"/>
          <Input
            editable="true"
            id="TotalPolicyPremiumRefunded"
            label="displaykey.Training.TotalPolicyPremiumRefunded"
            value="anABContact.FinancialSummary.TotalPolicyPremiumRefunded"/>
          <Label
            id="ClaimPaymentsLabel"
            label="displaykey.Training.ClaimPayments"/>
          <Input
            editable="true"
            id="TotalClaimPaymentsMade"
            label="displaykey.Training.TotalClaimPaymentsMade"
            value="anABContact.FinancialSummary.TotalClaimPaymentsMade"/>
          <Input
            editable="true"
            id="NumberOfClaims"
            label="displaykey.Training.NumberOfClaims"
            value="anABContact.FinancialSummary.NumberOfClaims"/>
          <Input
            editable="true"
            id="MostRecentClaim"
            label="displaykey.Training.MostRecentClaim"
            value="anABContact.FinancialSummary.MostRecentClaim"/>
        </InputColumn>
      </DetailViewPanel>
    </Card>
    <Card
      id="VendorInfoCard"
      title="displaykey.Training.VendorInfoCard"
      visible="(anABContact typeis ABPersonVendor) or (anABContact typeis ABCompanyVendor)">
      <PanelRef>
        <DetailViewPanel>
          <InputColumn>
            <Label
              id="IsRecommended"
              label="displaykey.Training.ThisVenderIsRecommendedByAcme"
              visible="anABContact.IsVendorRecommended"/>
            <Input
              id="VendorProfileCode"
              label="displaykey.Training.VendorProfileCode"
              value="anABContact.VendorProfileCode"
              visible="anABContact.VendorProfileCode != null"/>
          </InputColumn>
        </DetailViewPanel>
      </PanelRef>
      <PanelRef
        def="VendorEvaluationsLV(anABContact)"
        editable="true">
        <Toolbar>
          <IteratorButtons
            iterator="VendorEvaluationsLV.VendorEvaluationsLV"/>
          <ToolbarButton
            action="toggleVendorRecommendedFlag()"
            available="!CurrentLocation.InEditMode"
            id="RecommendVendorButton"
            label="anABContact.IsVendorRecommended ? displaykey.Training.UnrecommendVendor : displaykey.Training.RecommendVendor"/>
        </Toolbar>
      </PanelRef>
    </Card>
    <Card
      id="AnalysisCard"
      title="displaykey.Training.Analysis">
      <PanelRef
        def="ABContactAnalysisDV(anABContact)"
        id="analysis">
        <Toolbar>
          <EditButtons/>
        </Toolbar>
      </PanelRef>
    </Card>
    <Code><![CDATA[uses gw.api.util.DisplayableException

/* This function toggles the recommended status of a vendor. If the vendor
   is not recommended (and it has at least one evaluation), then the vendor
   is recommended and the custom "ABContactRecommended" event is added. (This
   event triggers a messaging integration point.) If the vendor is recommended,
   then this function unrecommends the vendor and clears out any profile code
   received from the integration point.
*/
   function toggleVendorRecommendedFlag() : void {
      // create new bundle
      gw.transaction.Transaction.runWithNewBundle(\ bundle -> {
         var thisVendor = bundle.add(anABContact)

         if (thisVendor.IsVendorRecommended) {
            // If vendor is already recommended, switch flag to not 
            // recommended and clear out profile code                    
            thisVendor.IsVendorRecommended = false
            thisVendor.VendorProfileCode = null
       
            } else {
               // If vendor is not recommended, verify that there is
               // at least one evaluation                           
                  if (thisVendor.VendorEvaluations.length == 0) {
                     throw new DisplayableException(displaykey.Training.NoEvaluations)
          
               } else {
                  // Vendor is not yet recommendeded and has at least one eval!
                  // calculate sum of eval scores                   
                  var evaluationSum = 0
                  for (thisEvaluation in anABContact.VendorEvaluations) {
                     evaluationSum = evaluationSum + thisEvaluation.TotalScore
                     }             
                  // switch flag to recommended and sent evaluations to external vendor
                  thisVendor.IsVendorRecommended = true
                  thisVendor.addEvent("ABContactRecommended")
                  thisVendor.VendorProfileCode = "(pending)"
                  } // end 
               }
      
         // runWithNewBundle() inherently commits the data              
         })
    
   } // end of function]]></Code>
  </CardViewPanel>
</PCF>