<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <ListViewPanel
    id="ContactComparisonLV">
    <Require
      name="pendingContactUpdate"
      type="PendingContactUpdate"/>
    <Variable
      initialValue="getRowTreeRoot()"
      name="root"
      recalculateOnRefresh="true"
      type="tree.RowTreeRootNode"/>
    <RowTree
      contentType="gw.api.bean.compare.ui.DiffDisplay"
      elementName="diff"
      id="lv2"
      pageSize="0"
      value="root">
      <Row
        editable="false">
        <Cell
          id="LabelField"
          label="displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.DiffColumnLabel"
          sortBy="getSortBy(diff)"
          sortOrder="1"
          value="diff.Label.elide(80)"
          width="500"/>
        <Cell
          enableSort="false"
          id="OldContactField"
          label="displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.BeforeChangesColumnLabel"
          value="oldValue(diff)"/>
        <Cell
          enableSort="false"
          id="NewContactField"
          label="displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.AfterChangesColumnLabel"
          value="newValue(diff)"/>
      </Row>
    </RowTree>
    <Code><![CDATA[uses gw.api.bean.compare.ui.DiffDisplay
uses gw.api.bean.compare.ui.EntityDiffDisplay
uses gw.api.contact.pendingchanges.DiffDisplays
uses gw.api.web.contact.PendingContactChangeUtil
uses gw.plugin.contact.pendingchange.ABContactContactDiffDisplay

function getRowTreeRoot() : tree.RowTreeRootNode {
  if (pendingContactUpdate == null) {
    return null
  }
  var diffDisplay = PendingContactChangeUtil.createDiffDisplayTree(pendingContactUpdate)
  return new tree.RowTreeRootNode({diffDisplay},
    \r ->(r typeis DiffDisplay) ? DiffDisplays.getVisibleChildren(r) : {}, DiffDisplays.getVisibleChildren(diffDisplay).HasElements ? 1 : 0)
}

function getSortBy (diff : DiffDisplay) : String {
  return ((diff typeis EntityDiffDisplay) ? "B:" : "A:") + diff.Label
}

function oldValue(diff : DiffDisplay) : String {
  if (diff typeis ABContactContactDiffDisplay) { // go fetch the NewValue regardless of type
    return diff.OldValue.elide(60)
  } else if (not DiffDisplays.getAllChildren(diff).Empty and (diff.Type==CHANGED or (diff.Type==UNCHANGED and DiffDisplays.hasDeepChanges(diff))))
    return displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.Changed  // default display key is empty string
  else if ((diff.Type == REMOVED or diff.Type == MOVED_FROM))
    return displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.Check
  else
    return diff.OldValue.elide(60)
}

function newValue(diff : DiffDisplay) : String {
  if (diff typeis ABContactContactDiffDisplay) { // go fetch the NewValue regardless of type
    return diff.NewValue.elide(60)
  } else if ((diff.Type == ADDED or diff.Type == MOVED_TO))
    return displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.Check
  else if (diff.Type == REMOVED or diff.Type == MOVED_FROM)
    return displaykey.Web.Contacts.PendingChanges.PendingUpdatesCard.Removed
  else
    return diff.NewValue.elide(60)
}]]></Code>
  </ListViewPanel>
</PCF>